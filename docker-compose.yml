
services:
  # Shared PostgreSQL with multiple databases
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    networks:
      - vms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Development backend
  backend-dev:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: development
      DB_NAME: vms_dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: dev_secret_123
    command: npm run dev
    ports:
      - "3000:3000"
    networks:
      - vms-network
    depends_on:
      postgres:
        condition: service_healthy

  # Testing backend
  backend-test:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      NODE_ENV: test
      DB_NAME: vms_test
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: test_secret_456
      JWT_EXPIRY: 1h
    command: npm test
    networks:
      - vms-network
    depends_on:
      postgres:
        condition: service_healthy

  # Frontend (development only)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      VITE_API_URL: http://backend-dev:3000
    networks:
      - vms-network
    depends_on:
      - backend-dev

networks:
  vms-network:
    driver: bridge

volumes:
  postgres_data: